{
  "openapi": "3.1.0",
  "info": {
    "title": "kodit API",
    "description": "\nThis is the REST API for the Kodit server. Please refer to the\n[Kodit documentation](https://docs.helix.ml/kodit/) for more information.\n    ",
    "version": "0.4.4"
  },
  "paths": {
    "/healthz": {
      "get": {
        "summary": "Healthz",
        "description": "Return a health check for the kodit API.",
        "operationId": "healthz_healthz_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/repositories/{repo_id}/commits": {
      "get": {
        "tags": [
          "commits"
        ],
        "summary": "List repository commits",
        "description": "List all commits for a repository.",
        "operationId": "list_repository_commits_api_v1_repositories__repo_id__commits_get",
        "security": [
          {
            "Header (X-API-KEY)": []
          }
        ],
        "parameters": [
          {
            "name": "repo_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repo Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitListResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid request"
          }
        }
      }
    },
    "/api/v1/repositories/{repo_id}/commits/{commit_sha}": {
      "get": {
        "tags": [
          "commits"
        ],
        "summary": "Get repository commit",
        "description": "Get a specific commit for a repository.",
        "operationId": "get_repository_commit_api_v1_repositories__repo_id__commits__commit_sha__get",
        "security": [
          {
            "Header (X-API-KEY)": []
          }
        ],
        "parameters": [
          {
            "name": "repo_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repo Id"
            }
          },
          {
            "name": "commit_sha",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Commit Sha"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Repository or commit not found"
          }
        }
      }
    },
    "/api/v1/repositories/{repo_id}/commits/{commit_sha}/files": {
      "get": {
        "tags": [
          "commits"
        ],
        "summary": "List commit files",
        "description": "List all files in a specific commit.",
        "operationId": "list_commit_files_api_v1_repositories__repo_id__commits__commit_sha__files_get",
        "security": [
          {
            "Header (X-API-KEY)": []
          }
        ],
        "parameters": [
          {
            "name": "repo_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repo Id"
            }
          },
          {
            "name": "commit_sha",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Commit Sha"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileListResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid request"
          }
        }
      }
    },
    "/api/v1/repositories/{repo_id}/commits/{commit_sha}/files/{blob_sha}": {
      "get": {
        "tags": [
          "commits"
        ],
        "summary": "Get commit file",
        "description": "Get a specific file from a commit.",
        "operationId": "get_commit_file_api_v1_repositories__repo_id__commits__commit_sha__files__blob_sha__get",
        "security": [
          {
            "Header (X-API-KEY)": []
          }
        ],
        "parameters": [
          {
            "name": "repo_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repo Id"
            }
          },
          {
            "name": "commit_sha",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Commit Sha"
            }
          },
          {
            "name": "blob_sha",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Blob Sha"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Repository, commit or file not found"
          }
        }
      }
    },
    "/api/v1/queue": {
      "get": {
        "tags": [
          "queue"
        ],
        "summary": "List Queue Tasks",
        "description": "List all tasks in the queue.\n\nOptionally filter by task type.",
        "operationId": "list_queue_tasks_api_v1_queue_get",
        "security": [
          {
            "Header (X-API-KEY)": []
          }
        ],
        "parameters": [
          {
            "name": "task_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaskOperation"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task Type"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskListResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid request"
          }
        }
      }
    },
    "/api/v1/queue/{task_id}": {
      "get": {
        "tags": [
          "queue"
        ],
        "summary": "Get Queue Task",
        "description": "Get details of a specific task in the queue.",
        "operationId": "get_queue_task_api_v1_queue__task_id__get",
        "security": [
          {
            "Header (X-API-KEY)": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Task not found"
          }
        }
      }
    },
    "/api/v1/repositories": {
      "get": {
        "tags": [
          "repositories"
        ],
        "summary": "List repositories",
        "description": "List all cloned repositories.",
        "operationId": "list_repositories_api_v1_repositories_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryListResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid request"
          }
        },
        "security": [
          {
            "Header (X-API-KEY)": []
          }
        ]
      },
      "post": {
        "tags": [
          "repositories"
        ],
        "summary": "Create repository",
        "description": "Clone a new repository and perform initial mapping.",
        "operationId": "create_repository_api_v1_repositories_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepositoryCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid request"
          }
        },
        "security": [
          {
            "Header (X-API-KEY)": []
          }
        ]
      }
    },
    "/api/v1/repositories/{repo_id}": {
      "get": {
        "tags": [
          "repositories"
        ],
        "summary": "Get repository",
        "description": "Get repository details including branches and recent commits.",
        "operationId": "get_repository_api_v1_repositories__repo_id__get",
        "security": [
          {
            "Header (X-API-KEY)": []
          }
        ],
        "parameters": [
          {
            "name": "repo_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repo Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryDetailsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Repository not found"
          }
        }
      },
      "delete": {
        "tags": [
          "repositories"
        ],
        "summary": "Delete repository",
        "description": "Delete a repository.",
        "operationId": "delete_repository_api_v1_repositories__repo_id__delete",
        "security": [
          {
            "Header (X-API-KEY)": []
          }
        ],
        "parameters": [
          {
            "name": "repo_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repo Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "500": {
            "description": "Internal server error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Repository not found"
          }
        }
      }
    },
    "/api/v1/repositories/{repo_id}/tags": {
      "get": {
        "tags": [
          "repositories"
        ],
        "summary": "List repository tags",
        "description": "List all tags for a repository.",
        "operationId": "list_repository_tags_api_v1_repositories__repo_id__tags_get",
        "security": [
          {
            "Header (X-API-KEY)": []
          }
        ],
        "parameters": [
          {
            "name": "repo_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repo Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagListResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Repository not found"
          }
        }
      }
    },
    "/api/v1/repositories/{repo_id}/tags/{tag_id}": {
      "get": {
        "tags": [
          "repositories"
        ],
        "summary": "Get repository tag",
        "description": "Get a specific tag for a repository.",
        "operationId": "get_repository_tag_api_v1_repositories__repo_id__tags__tag_id__get",
        "security": [
          {
            "Header (X-API-KEY)": []
          }
        ],
        "parameters": [
          {
            "name": "repo_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repo Id"
            }
          },
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tag Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Repository or tag not found"
          }
        }
      }
    },
    "/api/v1/search": {
      "post": {
        "tags": [
          "search"
        ],
        "summary": "Search Snippets",
        "description": "Search code snippets with filters matching MCP tool.",
        "operationId": "search_snippets_api_v1_search_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/indexes": {
      "get": {
        "tags": [
          "indexes"
        ],
        "summary": "List Indexes",
        "description": "List all indexes.",
        "operationId": "list_indexes_api_v1_indexes_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexListResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid request"
          }
        },
        "security": [
          {
            "Header (X-API-KEY)": []
          }
        ]
      },
      "post": {
        "tags": [
          "indexes"
        ],
        "summary": "Create Index",
        "description": "Create a new index and start async indexing.",
        "operationId": "create_index_api_v1_indexes_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IndexCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid request"
          }
        },
        "security": [
          {
            "Header (X-API-KEY)": []
          }
        ]
      }
    },
    "/api/v1/indexes/{index_id}": {
      "get": {
        "tags": [
          "indexes"
        ],
        "summary": "Get Index",
        "description": "Get index details.",
        "operationId": "get_index_api_v1_indexes__index_id__get",
        "security": [
          {
            "Header (X-API-KEY)": []
          }
        ],
        "parameters": [
          {
            "name": "index_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Index Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexDetailResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Index not found"
          }
        }
      },
      "delete": {
        "tags": [
          "indexes"
        ],
        "summary": "Delete Index",
        "description": "Delete an index.",
        "operationId": "delete_index_api_v1_indexes__index_id__delete",
        "security": [
          {
            "Header (X-API-KEY)": []
          }
        ],
        "parameters": [
          {
            "name": "index_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Index Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "500": {
            "description": "Internal server error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Index not found"
          }
        }
      }
    },
    "/api/v1/indexes/{index_id}/status": {
      "get": {
        "tags": [
          "indexes"
        ],
        "summary": "Get Index Status",
        "description": "Get the status of tasks for an index.",
        "operationId": "get_index_status_api_v1_indexes__index_id__status_get",
        "security": [
          {
            "Header (X-API-KEY)": []
          }
        ],
        "parameters": [
          {
            "name": "index_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Index Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusListResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Index not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CommitAttributes": {
        "properties": {
          "commit_sha": {
            "type": "string",
            "title": "Commit Sha"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "title": "Date"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "parent_commit_sha": {
            "type": "string",
            "title": "Parent Commit Sha"
          },
          "author": {
            "type": "string",
            "title": "Author"
          }
        },
        "type": "object",
        "required": [
          "commit_sha",
          "date",
          "message",
          "parent_commit_sha",
          "author"
        ],
        "title": "CommitAttributes",
        "description": "Commit attributes following JSON-API spec."
      },
      "CommitData": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "commit"
          },
          "id": {
            "type": "string",
            "title": "Id"
          },
          "attributes": {
            "$ref": "#/components/schemas/CommitAttributes"
          }
        },
        "type": "object",
        "required": [
          "id",
          "attributes"
        ],
        "title": "CommitData",
        "description": "Commit data following JSON-API spec."
      },
      "CommitListResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CommitData"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "CommitListResponse",
        "description": "Commit list response following JSON-API spec."
      },
      "CommitResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CommitData"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "CommitResponse",
        "description": "Single commit response following JSON-API spec."
      },
      "FileAttributes": {
        "properties": {
          "blob_sha": {
            "type": "string",
            "title": "Blob Sha"
          },
          "path": {
            "type": "string",
            "title": "Path"
          },
          "mime_type": {
            "type": "string",
            "title": "Mime Type"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "extension": {
            "type": "string",
            "title": "Extension"
          }
        },
        "type": "object",
        "required": [
          "blob_sha",
          "path",
          "mime_type",
          "size",
          "extension"
        ],
        "title": "FileAttributes",
        "description": "File attributes following JSON-API spec."
      },
      "FileData": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "file"
          },
          "id": {
            "type": "string",
            "title": "Id"
          },
          "attributes": {
            "$ref": "#/components/schemas/FileAttributes"
          }
        },
        "type": "object",
        "required": [
          "id",
          "attributes"
        ],
        "title": "FileData",
        "description": "File data following JSON-API spec."
      },
      "FileListResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/FileData"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "FileListResponse",
        "description": "File list response following JSON-API spec."
      },
      "FileResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/FileData"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "FileResponse",
        "description": "Single file response following JSON-API spec."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "IndexAttributes": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "uri": {
            "type": "string",
            "title": "Uri"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "updated_at",
          "uri"
        ],
        "title": "IndexAttributes",
        "description": "Index attributes for JSON:API responses."
      },
      "IndexCreateAttributes": {
        "properties": {
          "uri": {
            "type": "string",
            "title": "Uri",
            "description": "URI of the source to index"
          }
        },
        "type": "object",
        "required": [
          "uri"
        ],
        "title": "IndexCreateAttributes",
        "description": "Attributes for creating an index."
      },
      "IndexCreateData": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "index"
          },
          "attributes": {
            "$ref": "#/components/schemas/IndexCreateAttributes"
          }
        },
        "type": "object",
        "required": [
          "attributes"
        ],
        "title": "IndexCreateData",
        "description": "Data for creating an index."
      },
      "IndexCreateRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/IndexCreateData"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "IndexCreateRequest",
        "description": "JSON:API request for creating an index."
      },
      "IndexData": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "index"
          },
          "id": {
            "type": "string",
            "title": "Id"
          },
          "attributes": {
            "$ref": "#/components/schemas/IndexAttributes"
          }
        },
        "type": "object",
        "required": [
          "id",
          "attributes"
        ],
        "title": "IndexData",
        "description": "Index data for JSON:API responses."
      },
      "IndexDetailResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/IndexData"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "IndexDetailResponse",
        "description": "JSON:API response for index details with included resources."
      },
      "IndexListResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/IndexData"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "IndexListResponse",
        "description": "JSON:API response for index list."
      },
      "IndexResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/IndexData"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "IndexResponse",
        "description": "JSON:API response for single index."
      },
      "RepositoryAttributes": {
        "properties": {
          "remote_uri": {
            "type": "string",
            "minLength": 1,
            "format": "uri",
            "title": "Remote Uri"
          },
          "sanitized_remote_uri": {
            "type": "string",
            "minLength": 1,
            "format": "uri",
            "title": "Sanitized Remote Uri"
          },
          "cloned_path": {
            "type": "string",
            "format": "path",
            "title": "Cloned Path"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "default_branch": {
            "type": "string",
            "title": "Default Branch"
          },
          "total_commits": {
            "type": "integer",
            "title": "Total Commits",
            "default": 0
          },
          "total_branches": {
            "type": "integer",
            "title": "Total Branches",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "remote_uri",
          "sanitized_remote_uri",
          "cloned_path",
          "created_at",
          "default_branch"
        ],
        "title": "RepositoryAttributes",
        "description": "Repository attributes following JSON-API spec."
      },
      "RepositoryBranchData": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "is_default": {
            "type": "boolean",
            "title": "Is Default"
          },
          "commit_count": {
            "type": "integer",
            "title": "Commit Count"
          }
        },
        "type": "object",
        "required": [
          "name",
          "is_default",
          "commit_count"
        ],
        "title": "RepositoryBranchData",
        "description": "Repository branch data."
      },
      "RepositoryCommitData": {
        "properties": {
          "sha": {
            "type": "string",
            "title": "Sha"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "author": {
            "type": "string",
            "title": "Author"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          }
        },
        "type": "object",
        "required": [
          "sha",
          "message",
          "author",
          "timestamp"
        ],
        "title": "RepositoryCommitData",
        "description": "Repository commit data for repository details."
      },
      "RepositoryCreateAttributes": {
        "properties": {
          "remote_uri": {
            "type": "string",
            "minLength": 1,
            "format": "uri",
            "title": "Remote Uri"
          }
        },
        "type": "object",
        "required": [
          "remote_uri"
        ],
        "title": "RepositoryCreateAttributes",
        "description": "Repository creation attributes."
      },
      "RepositoryCreateData": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "repository"
          },
          "attributes": {
            "$ref": "#/components/schemas/RepositoryCreateAttributes"
          }
        },
        "type": "object",
        "required": [
          "attributes"
        ],
        "title": "RepositoryCreateData",
        "description": "Repository creation data."
      },
      "RepositoryCreateRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RepositoryCreateData"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "RepositoryCreateRequest",
        "description": "Repository creation request."
      },
      "RepositoryData": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "repository"
          },
          "id": {
            "type": "string",
            "title": "Id"
          },
          "attributes": {
            "$ref": "#/components/schemas/RepositoryAttributes"
          }
        },
        "type": "object",
        "required": [
          "id",
          "attributes"
        ],
        "title": "RepositoryData",
        "description": "Repository data following JSON-API spec."
      },
      "RepositoryDetailsResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RepositoryData"
          },
          "branches": {
            "items": {
              "$ref": "#/components/schemas/RepositoryBranchData"
            },
            "type": "array",
            "title": "Branches"
          },
          "recent_commits": {
            "items": {
              "$ref": "#/components/schemas/RepositoryCommitData"
            },
            "type": "array",
            "title": "Recent Commits"
          }
        },
        "type": "object",
        "required": [
          "data",
          "branches",
          "recent_commits"
        ],
        "title": "RepositoryDetailsResponse",
        "description": "Repository details response with branches and commits."
      },
      "RepositoryListResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/RepositoryData"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "RepositoryListResponse",
        "description": "Repository list response following JSON-API spec."
      },
      "RepositoryResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RepositoryData"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "RepositoryResponse",
        "description": "Single repository response following JSON-API spec."
      },
      "SearchAttributes": {
        "properties": {
          "keywords": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Keywords",
            "description": "Search keywords"
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code",
            "description": "Code search query"
          },
          "text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Text",
            "description": "Text search query"
          },
          "limit": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit",
            "description": "Maximum number of results to return",
            "default": 10
          },
          "filters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SearchFilters"
              },
              {
                "type": "null"
              }
            ],
            "description": "Search filters"
          }
        },
        "type": "object",
        "title": "SearchAttributes",
        "description": "Search attributes for JSON:API requests."
      },
      "SearchData": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "search"
          },
          "attributes": {
            "$ref": "#/components/schemas/SearchAttributes"
          }
        },
        "type": "object",
        "required": [
          "attributes"
        ],
        "title": "SearchData",
        "description": "Search data for JSON:API requests."
      },
      "SearchFilters": {
        "properties": {
          "languages": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Languages",
            "description": "Programming languages to filter by"
          },
          "authors": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Authors",
            "description": "Authors to filter by"
          },
          "start_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Date",
            "description": "Filter snippets created after this date"
          },
          "end_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Date",
            "description": "Filter snippets created before this date"
          },
          "sources": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sources",
            "description": "Source repositories to filter by"
          },
          "file_patterns": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Patterns",
            "description": "File path patterns to filter by"
          }
        },
        "type": "object",
        "title": "SearchFilters",
        "description": "Search filters for JSON:API requests."
      },
      "SearchRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SearchData"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "SearchRequest",
        "description": "JSON:API request for searching snippets."
      },
      "SearchResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/SnippetData"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "SearchResponse",
        "description": "JSON:API response for search results."
      },
      "SnippetAttributes": {
        "properties": {
          "content": {
            "type": "string",
            "title": "Content"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "original_scores": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Original Scores"
          },
          "source_uri": {
            "type": "string",
            "title": "Source Uri"
          },
          "relative_path": {
            "type": "string",
            "title": "Relative Path"
          },
          "language": {
            "type": "string",
            "title": "Language"
          },
          "authors": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Authors"
          },
          "summary": {
            "type": "string",
            "title": "Summary"
          }
        },
        "type": "object",
        "required": [
          "content",
          "created_at",
          "updated_at",
          "original_scores",
          "source_uri",
          "relative_path",
          "language",
          "authors",
          "summary"
        ],
        "title": "SnippetAttributes",
        "description": "Snippet attributes for JSON:API responses."
      },
      "SnippetData": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "snippet"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "attributes": {
            "$ref": "#/components/schemas/SnippetAttributes"
          }
        },
        "type": "object",
        "required": [
          "id",
          "attributes"
        ],
        "title": "SnippetData",
        "description": "Snippet data for JSON:API responses."
      },
      "TagAttributes": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "target_commit_sha": {
            "type": "string",
            "title": "Target Commit Sha"
          },
          "is_version_tag": {
            "type": "boolean",
            "title": "Is Version Tag"
          }
        },
        "type": "object",
        "required": [
          "name",
          "target_commit_sha",
          "is_version_tag"
        ],
        "title": "TagAttributes",
        "description": "Tag attributes following JSON-API spec."
      },
      "TagData": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "tag"
          },
          "id": {
            "type": "string",
            "title": "Id"
          },
          "attributes": {
            "$ref": "#/components/schemas/TagAttributes"
          }
        },
        "type": "object",
        "required": [
          "id",
          "attributes"
        ],
        "title": "TagData",
        "description": "Tag data following JSON-API spec."
      },
      "TagListResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/TagData"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "TagListResponse",
        "description": "Tag list response following JSON-API spec."
      },
      "TagResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TagData"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "TagResponse",
        "description": "Single tag response following JSON-API spec."
      },
      "TaskAttributes": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type"
          },
          "priority": {
            "type": "integer",
            "title": "Priority"
          },
          "payload": {
            "additionalProperties": true,
            "type": "object",
            "title": "Payload"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "type",
          "priority",
          "payload",
          "created_at",
          "updated_at"
        ],
        "title": "TaskAttributes",
        "description": "Task attributes for JSON:API responses."
      },
      "TaskData": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "task"
          },
          "id": {
            "type": "string",
            "title": "Id"
          },
          "attributes": {
            "$ref": "#/components/schemas/TaskAttributes"
          }
        },
        "type": "object",
        "required": [
          "id",
          "attributes"
        ],
        "title": "TaskData",
        "description": "Task data for JSON:API responses."
      },
      "TaskListResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/TaskData"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "TaskListResponse",
        "description": "JSON:API response for task list."
      },
      "TaskOperation": {
        "type": "string",
        "enum": [
          "kodit.root",
          "kodit.index.create",
          "kodit.index.run",
          "kodit.index.run.refresh_working_copy",
          "kodit.index.run.delete_old_snippets",
          "kodit.index.run.extract_snippets",
          "kodit.index.run.create_bm25_index",
          "kodit.index.run.create_code_embeddings",
          "kodit.index.run.enrich_snippets",
          "kodit.index.run.create_text_embeddings",
          "kodit.index.run.update_index_timestamp",
          "kodit.index.run.clear_file_processing_statuses",
          "kodit.index.run.index_commit"
        ],
        "title": "TaskOperation",
        "description": "Task operation."
      },
      "TaskResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TaskData"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "TaskResponse",
        "description": "JSON:API response for single task."
      },
      "TaskStatusAttributes": {
        "properties": {
          "step": {
            "type": "string",
            "title": "Step",
            "description": "Name of the task/operation"
          },
          "state": {
            "type": "string",
            "title": "State",
            "description": "Current state of the task"
          },
          "progress": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Progress",
            "description": "Progress percentage (0-100)",
            "default": 0.0
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "Total number of items to process",
            "default": 0
          },
          "current": {
            "type": "integer",
            "title": "Current",
            "description": "Current number of items processed",
            "default": 0
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "Task start time"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "Last update time"
          },
          "error": {
            "type": "string",
            "title": "Error",
            "description": "Error message",
            "default": ""
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Message",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "step",
          "state"
        ],
        "title": "TaskStatusAttributes",
        "description": "Task status attributes for JSON:API responses."
      },
      "TaskStatusData": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "task_status"
          },
          "id": {
            "type": "string",
            "title": "Id"
          },
          "attributes": {
            "$ref": "#/components/schemas/TaskStatusAttributes"
          }
        },
        "type": "object",
        "required": [
          "id",
          "attributes"
        ],
        "title": "TaskStatusData",
        "description": "Task status data for JSON:API responses."
      },
      "TaskStatusListResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/TaskStatusData"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "TaskStatusListResponse",
        "description": "JSON:API response for task status list."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "Header (X-API-KEY)": {
        "type": "apiKey",
        "description": "API key for authentication (only if set in environmental variables)",
        "in": "header",
        "name": "x-api-key"
      }
    }
  }
}